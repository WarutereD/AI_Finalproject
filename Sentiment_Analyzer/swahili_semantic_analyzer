import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load the dataset
df = pd.read_csv("Sentiment_Analyzer/dataset/swahili_test.csv")

# Text preprocessing
stop_words = stopwords.words("swahili")
df["maneno"] = df["maneno"].apply(lambda x: " ".join([word for word in re.sub('[^a-zA-Z0-9\s]', '', x).split() if word not in stop_words]))

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df["maneno"], df["lugha"], test_size=0.3, random_state=42)

# Vectorize the text data using TF-IDF
vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train an SVM classifier
svm = SVC(kernel='linear', C=1.0)
svm.fit(X_train_vec, y_train)

# Predict on the test set
y_pred = svm.predict(X_test_vec)

# Calculate accuracy score
acc = accuracy_score(y_test, y_pred)*100
print("Accuracy:", acc)

# Use the trained model to predict the sentiment of new Swahili text
new_text = "Hii ni filamu nzuri sana"
new_text_processed = " ".join([word for word in re.sub('[^a-zA-Z0-9\s]', '', new_text).split() if word not in stop_words])
new_text_vec = vectorizer.transform([new_text_processed])
sentiment = svm.predict(new_text_vec)[0]
print("Sentiment of '{}' is '{}'".format(new_text, sentiment))

